create database OL_JAPFA;

create schema IND_UTIL;
create schema IND_SAPHANA_DEV_TN;
create schema IND;


-- Create stage file formate for the CSV file
CREATE OR REPLACE STAGE OL_JAPFA.IND_UTIL.BILLING_STAGE_FFF
    FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = '"');


drop stage OL_JAPFA.IND_UTIL.BILLING_STAGE_FFF;

CREATE OR REPLACE  TABLE OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T (
    BILLING_DOCUMENT NUMBER,
    ITEM NUMBER,
    BILLING_TYPE VARCHAR,
    BILLING_DATE DATE,
    BILLING_QTY_IN_SKU NUMBER,
    MATERIAL VARCHAR,
    ITEM_DESCRIPTION VARCHAR,
    MATERIAL_GROUP VARCHAR,
    ASSIGNMENT NUMBER

);


CREATE OR REPLACE TABLE  OL_JAPFA.IND.DIM_PRODUCT (
    MATERIAL VARCHAR PRIMARY KEY,
    ITEM_DESCRIPTION VARCHAR,
    MATERIAL_GROUP VARCHAR
);

SELECT * FROM OL_JAPFA.IND.DIM_PRODUCT;

CREATE OR REPLACE TABLE OL_JAPFA.IND.DIM_BILLING_TYPE (
    BILLING_TYPE VARCHAR PRIMARY KEY
);

SELECT * FROM OL_JAPFA.IND.DIM_BILLING_TYPE;

CREATE OR REPLACE TABLE OL_JAPFA.IND.FACT_SALES (
    BILLING_DOCUMENT NUMBER,
    ITEM NUMBER,
    BILLING_DATE DATE,
    BILLING_QTY_IN_SKU NUMBER,
    MATERIAL VARCHAR,           -- FK to DIM_PRODUCT
    BILLING_TYPE VARCHAR,       -- FK to DIM_BILLING_TYPE
    ASSIGNMENT NUMBER,
    
    PRIMARY KEY (BILLING_DOCUMENT, ITEM),
    FOREIGN KEY (MATERIAL) REFERENCES DIM_PRODUCT(MATERIAL),
    FOREIGN KEY (BILLING_TYPE) REFERENCES DIM_BILLING_TYPE(BILLING_TYPE)
);


SELECT * FROM OL_JAPFA.IND.FACT_SALES;



CREATE OR REPLACE STREAM OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM ON TABLE OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T;

drop stream OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM;


select * from OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM;

select * from OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T;

truncate OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T;


-- Create Silver Table
CREATE OR REPLACE TABLE OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T (
    BILLING_DOCUMENT NUMBER,
    ITEM NUMBER,
    BILLING_TYPE VARCHAR,
    BILLING_DATE DATE,
    BILLING_QTY_IN_SKU NUMBER,
    MATERIAL VARCHAR,
    ITEM_DESCRIPTION VARCHAR,
    MATERIAL_GROUP VARCHAR,
    ASSIGNMENT NUMBER
);

truncate OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T;

 COPY INTO OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
    FROM @OL_JAPFA.IND_UTIL.BILLING_STAGE_FFF/Sample_S1.csv
    FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = '"') 
    FORCE = TRUE;

drop stage OL_JAPFA.IND_UTIL.BILLING_STAGE_FFF;



CREATE OR REPLACE PROCEDURE OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_MEDALLION_D()
RETURNS STRING
LANGUAGE JAVASCRIPT
AS
$$
var stream_count = 0;

// Step 0: Check stream contents
var sql_command = `SELECT COUNT(*) FROM OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM`;
var stmt = snowflake.createStatement({sqlText: sql_command});
var result = stmt.execute();

if (result.next()) {
    stream_count = result.getColumnValue(1);
}

// If no changes, exit early
if (stream_count == 0) {
    return 'No incremental data found in stream. ETL aborted.';
}

// Step 1: Silver Layer - Apply CDC from stream
var merge_sql = `
MERGE INTO OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T AS TGT
USING (
    SELECT *
    FROM OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM
    -- WHERE METADATA$ACTION IN ('INSERT', 'UPDATE', 'DELETE')
) AS SRC
ON TGT.BILLING_DOCUMENT = SRC.BILLING_DOCUMENT AND TGT.ITEM = SRC.ITEM

-- DELETE logic
WHEN MATCHED AND SRC.METADATA$ACTION = 'DELETE' THEN
    DELETE

-- UPDATE logic
WHEN MATCHED AND SRC.METADATA$ACTION = 'UPDATE' THEN
    UPDATE SET
        BILLING_TYPE = SRC.BILLING_TYPE,
        BILLING_DATE = SRC.BILLING_DATE,
        BILLING_QTY_IN_SKU = SRC.BILLING_QTY_IN_SKU,
        MATERIAL = SRC.MATERIAL,
        ITEM_DESCRIPTION = SRC.ITEM_DESCRIPTION,
        MATERIAL_GROUP = SRC.MATERIAL_GROUP,
        ASSIGNMENT = SRC.ASSIGNMENT

-- INSERT logic
WHEN NOT MATCHED AND SRC.METADATA$ACTION = 'INSERT' THEN
    INSERT (
        BILLING_DOCUMENT, ITEM, BILLING_TYPE, BILLING_DATE,
        BILLING_QTY_IN_SKU, MATERIAL, ITEM_DESCRIPTION,
        MATERIAL_GROUP, ASSIGNMENT
    )
    VALUES (
        SRC.BILLING_DOCUMENT, SRC.ITEM, SRC.BILLING_TYPE, SRC.BILLING_DATE,
        SRC.BILLING_QTY_IN_SKU, SRC.MATERIAL, SRC.ITEM_DESCRIPTION,
        SRC.MATERIAL_GROUP, SRC.ASSIGNMENT
    );
`;
snowflake.createStatement({sqlText: merge_sql}).execute();


// Step 3: Gold Layer
var gold_sql = `
CREATE OR REPLACE TABLE OL_JAPFA.IND_SAPHANA_DEV_TN.ZSD_BAS_SALESDOC_ALL_AGG_T AS
SELECT
    zf2.BILLING_DOCUMENT,
    zf2.ITEM,
    zf2.BILLING_TYPE,
    zf2.BILLING_DATE,
    zf2.BILLING_QTY_IN_SKU,
    zf2.MATERIAL,
    zf2.ITEM_DESCRIPTION,
    zf2.MATERIAL_GROUP,
    zf2.ASSIGNMENT,
    zf2.BILLING_QTY_IN_SKU 
    - COALESCE(zre_s1.BILLING_QTY_IN_SKU, 0) AS FINAL_QTY
FROM OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T zf2
LEFT JOIN OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T zre_s1
    ON zf2.BILLING_DOCUMENT = zre_s1.ASSIGNMENT
    AND zf2.MATERIAL = zre_s1.MATERIAL
    AND zf2.ITEM_DESCRIPTION = zre_s1.ITEM_DESCRIPTION
    AND zre_s1.BILLING_TYPE IN ('ZRE', 'S1')   
WHERE zf2.BILLING_TYPE = 'ZF2';  
`;
snowflake.createStatement({sqlText: gold_sql}).execute();

return 'ETL process completed successfully. Stream changes processed: ' + stream_count;
$$;




-- To Run the SP 
-- call OL_JAPFA.IND.SP_RUN_ETL_MEDALLION();
call OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_MEDALLION_D();

CREATE OR REPLACE PROCEDURE OL_JAPFA.IND_UTIL.SP_LOAD_DIM_FACT_TABLES()
RETURNS STRING
LANGUAGE JAVASCRIPT
AS
$$
try {
    // Step 1: Load DIM_PRODUCT
    var dimProductSQL = `
        MERGE INTO OL_JAPFA.IND.DIM_PRODUCT AS TGT
        USING (
            SELECT DISTINCT MATERIAL, ITEM_DESCRIPTION, MATERIAL_GROUP
            FROM OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
        ) AS SRC
        ON TGT.MATERIAL = SRC.MATERIAL
        WHEN NOT MATCHED THEN
            INSERT (MATERIAL, ITEM_DESCRIPTION, MATERIAL_GROUP)
            VALUES (SRC.MATERIAL, SRC.ITEM_DESCRIPTION, SRC.MATERIAL_GROUP);
    `;
    snowflake.createStatement({sqlText: dimProductSQL}).execute();

    // Step 2: Load DIM_BILLING_TYPE
    var dimBillingSQL = `
        MERGE INTO OL_JAPFA.IND.DIM_BILLING_TYPE AS TGT
        USING (
            SELECT DISTINCT BILLING_TYPE
            FROM OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
        ) AS SRC
        ON TGT.BILLING_TYPE = SRC.BILLING_TYPE
        WHEN NOT MATCHED THEN
            INSERT (BILLING_TYPE)
            VALUES (SRC.BILLING_TYPE);
    `;
    snowflake.createStatement({sqlText: dimBillingSQL}).execute();

    // Step 3: Load FACT_SALES
    var factSalesSQL = `
        INSERT INTO OL_JAPFA.IND.FACT_SALES (
            BILLING_DOCUMENT, ITEM, BILLING_DATE, BILLING_QTY_IN_SKU,
            MATERIAL, BILLING_TYPE, ASSIGNMENT
        )
        SELECT BILLING_DOCUMENT, ITEM, BILLING_DATE, BILLING_QTY_IN_SKU,
               MATERIAL, BILLING_TYPE, ASSIGNMENT
        FROM OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
        WHERE BILLING_DOCUMENT IS NOT NULL;
    `;
    snowflake.createStatement({sqlText: factSalesSQL}).execute();

    return 'Dimension and Fact tables loaded successfully.';
} catch (err) {
    return 'Error during ETL: ' + err.message;
}
$$;




call OL_JAPFA.IND_UTIL.SP_LOAD_DIM_FACT_TABLES();

select * from OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T;

CREATE OR REPLACE TASK OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_TASK
  WAREHOUSE = COMPUTE_WH 
  SCHEDULE = '11 SECONDS'
AS
call OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_MEDALLION_D();

ALTER TASK OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_TASK RESUME;
ALTER TASK OL_JAPFA.IND_SAPHANA_DEV_TN.SP_RUN_ETL_TASK SUSPEND;


SHOW TASKS IN ACCOUNT;


INSERT INTO OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
(
    BILLING_DOCUMENT,
    ITEM,
    BILLING_TYPE,
    BILLING_DATE,
    BILLING_QTY_IN_SKU,
    MATERIAL,
    ITEM_DESCRIPTION,
    MATERIAL_GROUP,
    ASSIGNMENT
    
)VALUES(
    60000025,
    10,
    'ZRE',
    '2024-09-03',
    200,
    '34000000',
    'COMFEED P Oroiler Starter CRB50',
    'FPBF01',
    60000004

);
-- (
--     60000004,
--     10,
--     'ZF2',
--     '2024-09-05',
--     400,
--     '34000000',
--     'COMFEED P Oroiler Starter CRB50',
--     'FPBF01',
--     60000004

-- );


UPDATE OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
SET BILLING_DATE = '2024-09-19'
WHERE BILLING_DOCUMENT = 60000001
  AND ASSIGNMENT = 60000001
  AND MATERIAL_GROUP = 'FPBF01'
  AND BILLING_DATE = '2024-09-13';


DELETE FROM OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T WHERE BILLING_DOCUMENT = 60000022;

INSERT INTO  OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T
(
    BILLING_DOCUMENT,
    ITEM,
    BILLING_TYPE,
    BILLING_DATE,
    BILLING_QTY_IN_SKU,
    MATERIAL,
    ITEM_DESCRIPTION,
    MATERIAL_GROUP,
    ASSIGNMENT
    
)VALUES(
    60000044,
    10,
    'ZRE',
    '2024-09-27',
    200,
    '34000000',
    'COMFEED P Oroiler Starter CRB50',
    'FPBF01',
    60000044

);
-- (
--     60000044,
--     10,
--     'ZF2',
--     '2024-09-27',
--     100,
--     '34000000',
--     'COMFEED P Oroiler Starter CRB50',
--     'FPBF01',
--     60000044

-- );






select * from OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T;

select * from OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T;

select * from OL_JAPFA.IND_SAPHANA_DEV_TN.ZSD_BAS_SALESDOC_ALL_AGG_T;

select * from OL_JAPFA.IND_UTIL.BILLING_TAB_STREAM;









truncate OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_STAGE_T;
truncate OL_JAPFA.IND_SAPHANA_DEV_TN.ZSD_BAS_SALESDOC_ALL_AGG_T;
truncate OL_JAPFA.IND_UTIL.ZSD_BAS_SALESDOC_ALL_TGT_T;